#!/usr/bin/env ruby

require 'open3'
require 'yaml'
require 'date'
require 'etc'

$indent = 0

def time(desc)
  st = Time.now
  $indent += 1
  yield
  $indent -= 1
  ft = Time.now

  elapsed = ft - st

  puts "%.3fs #{" " * $indent}| %s" % [elapsed, desc]
end

def run(command)
  Open3.popen2e(command) do |stdin, stdout_and_stderr, wait_thr|
    stdout_and_stderr.each_line do |line|
      puts line
    end

    exit_status = wait_thr.value
    unless exit_status.success?
      abort "Command failed with exit status #{exit_status.exitstatus}"
    end
  end
end

require 'thread' # for Mutex: Ruby doesn't provide out of the box thread-safe arrays

class ThreadPool
  def initialize(max_threads = 10)
    @pool = SizedQueue.new(max_threads)
    max_threads.times{ @pool << 1 }
    @mutex = Mutex.new
    @running_threads = []
  end

  def run(&block)
    @pool.pop
    @mutex.synchronize do
      @running_threads << Thread.start do
        begin
          block[]
        rescue Exception => e
          puts "Exception: #{e.message}\n#{e.backtrace}"
        ensure
          @pool << 1
        end
      end
    end
  end

  def await_completion
    @running_threads.each &:join
  end
end


time "Make the website" do
  time "Setup directories"  do
    run "mkdir -p out/site/articles"
    run "mkdir -p out/metadata/posts"
  end

  time "Generate metadata" do
    run "ruby src/ruby/generate_index_metadata.rb"
  end

  time "Generate HTML" do
    pool = ThreadPool.new(Etc.nprocessors)
    Dir["data/posts/*.md"].each do |file|
      pool.run do
        metadata_file = "out/metadata/posts/#{File.basename(file)}.yml"
        slug = YAML
          .load_file(metadata_file, permitted_classes: [Date, DateTime, Time])
          .fetch("url")
        cmd = <<-EOS.gsub(/\n/, " ")
          pandoc
            --template src/template.html
            --metadata-file=#{metadata_file}
            #{file}
            | gzip > out/site#{slug}
        EOS
        run cmd
      end
    end

    # Index page
    cmd = <<-EOS.gsub(/\n/, " ")
      echo "" |
      pandoc
        --template src/index.html
        --metadata-file=out/metadata/index.yml
        | gzip > out/site/index.html
    EOS
    run cmd

    pool.await_completion
  end
  
  time "Copy images" do
    run "rsync -a data/images out/site/"
  end
end
